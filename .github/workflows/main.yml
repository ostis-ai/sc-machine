name: Tests

on:
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  run_tests:
    name: ${{ matrix.os }}, ${{ matrix.build_type }}, ${{ matrix.file_memory }}, ${{ matrix.config.cxx }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-20.04, ubuntu-22.04]
        file_memory: ["Dictionary", "Rocksdb"]
        build_type: ["Debug", "Release"]
        config:
          - { cc: "gcc", cxx: "g++" }
        exclude:
          - os: macos-latest
            file_memory: "Rocksdb"

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: Install dependencies (MacOS)
        if: startswith(matrix.os, 'macos')
        run: |
          scripts/install_deps_macOS.sh
          pip3 install --user -r requirements.txt

      - name: Install dependencies (Ubuntu)
        if: startswith(matrix.os, 'ubuntu')
        run: scripts/install_deps_ubuntu.sh --dev --rocksdb

      - name: Restore build caches
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.config.cxx }}-${{ matrix.build_type }}-${{ matrix.file_memory }}

      - name: Build
        id: run_cmake
        env:
          CC: ${{ matrix.config.cc }}
          CXX: ${{ matrix.config.cxx }}
          FILE_MEMORY: ${{ matrix.file_memory }}
          BUILD_TYPE: ${{ matrix.build_type }}
          COVERAGE: OFF
          SANITIZER_TYPE: none
        run: scripts/ci/make-tests.sh

      - name: Run tests
        id: run_tests
        run: scripts/ci/run-tests.sh

      - name: Run sc-server
        id: run_sc_server
        run: |
          mkdir kb
          bin/sc-builder -i kb -o kb.bin --clear -f
          bin/sc-server -t -c config/sc-machine.ini -r kb.bin
